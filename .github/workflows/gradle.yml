# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    # secret code
    - name: Create application.properties
      run: |
        mkdir -p src/main/resources
        cat <<EOF > src/main/resources/application.properties
        server.port=9093
        
        # Oracle DB
        spring.datasource.hikari.driver-class-name=oracle.jdbc.driver.OracleDriver
        spring.datasource.hikari.jdbc-url=${{ secrets.DB_URL }}
        spring.datasource.hikari.username=${{ secrets.DB_USER }}
        spring.datasource.hikari.password=${{ secrets.DB_PASS }}
        
        spring.jpa.hibernate.ddl-auto=update
        spring.jpa.generate-ddl=true
        spring.jpa.show-sql=false
        spring.jpa.properties.hibernate.format_sql=true
        
        spring.datasource.hikari.maximum-pool-size=10
        spring.datasource.hikari.minimum-idle=5
        spring.datasource.hikari.connection-timeout=5000
        
        spring.servlet.multipart.maxFileSize=10MB
        spring.servlet.multipart.maxRequestSize=10MB
        
        # Google OAuth
        spring.security.oauth2.client.registration.google.client-id=${{ secrets.GOOGLE_CLIENT_ID }}
        spring.security.oauth2.client.registration.google.client-secret=${{ secrets.GOOGLE_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.google.scope=profile,email
        
        # Naver OAuth
        spring.security.oauth2.client.registration.naver.client-id=${{ secrets.NAVER_CLIENT_ID }}
        spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_CLIENT_SECRET }}
        spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}
        spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
        spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
        spring.security.oauth2.client.registration.naver.client-name=Naver
        spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
        spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
        spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
        spring.security.oauth2.client.provider.naver.user-name-attribute=response
        
        # SMS
        sms.id=${{ secrets.SMS_ID }}
        sms.callback=${{ secrets.SMS_CALLBACK }}
        sms.refkey=${{ secrets.SMS_REFKEY }}
        sms.apiKey=${{ secrets.SMS_API_KEY }}
        sms.user=${{ secrets.SMS_USER }}
        sms.password=${{ secrets.SMS_PASSWORD }}
        
        # Security
        security.secret-key=${{ secrets.SECRET_KEY }}
        EOF

    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci

    - name: Build Frontend
      run: |
        cd frontend
        npm run build

    - name: Verify Frontend Build
      run: |
        if [ ! -d "frontend/frontend_build" ]; then
          echo "Error: frontend_build directory not found!"
          exit 1
        fi
        echo "Frontend build completed successfully"
        ls -la frontend/frontend_build

    - name: Build Backend with Gradle
      run: ./gradlew build

    - name: Test SSH Connection
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          echo "SSH connection successful"
          whoami
          ls -al /home/ubuntu/deploy

    - name: Copy Frontend Build to Server
      uses: appleboy/scp-action@master
      with:
        username: ${{ secrets.SERVER_USERNAME }}
        host: ${{ secrets.SERVER_HOST }}
        key: ${{ secrets.SERVER_KEY }}
        source: "./frontend/frontend_build"
        target: "/home/ubuntu/deploy"
        strip_components: 1

    - name: Copy Backend WAR to Server
      uses: appleboy/scp-action@master
      with:
        username: ${{ secrets.SERVER_USERNAME }}
        host: ${{ secrets.SERVER_HOST }}
        key: ${{ secrets.SERVER_KEY }}
        source: "./build/libs/*.war"
        target: "/home/ubuntu/deploy"
        strip_components: 2

    - name: Deploy Backend and Frontend
      uses: appleboy/ssh-action@master
      with:
        username: ${{ secrets.SERVER_USERNAME }}
        host: ${{ secrets.SERVER_HOST }}
        key: ${{ secrets.SERVER_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script_stop: true
        script: |
          cd /home/ubuntu/deploy
          echo "Current directory contents:"
          ls -la
          
          # Backend deployment
          if [ -f "deploy.sh" ]; then
            chmod +x deploy.sh
            echo "Executing backend deployment..."
            ./deploy.sh
          else
            echo "Warning: deploy.sh not found"
          fi
          
          # Frontend deployment
          if [ -f "front-deploy.sh" ]; then
            chmod +x front-deploy.sh
            echo "Executing frontend deployment..."
            ./front-deploy.sh
          else
            echo "Warning: front-deploy.sh not found"
          fi
          
          echo "Deployment completed"

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
